Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(revision 221465d2f0da65f546894627d21b86f31b8e9ad3)
+++ .idea/vcs.xml	(revision 221465d2f0da65f546894627d21b86f31b8e9ad3)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision 5883c9a24c12fa3d3d589e29dd2d01bbe67236d8)
+++ app/src/main/AndroidManifest.xml	(revision 221465d2f0da65f546894627d21b86f31b8e9ad3)
@@ -2,6 +2,8 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="jp.techacademy.madoka.inagaki.mytaskapp">
 
+<!--    スリープ中もブロードキャストを受け取るためのパーミッション-->
+    <uses-permission android:name="android.permission.WAKE_LOCK"/>
     <application
         android:name=".TaskApp"
         android:allowBackup="true"
@@ -10,6 +12,8 @@
         android:roundIcon="@mipmap/ic_launcher_round"
         android:supportsRtl="true"
         android:theme="@style/AppTheme">
+
+
         <activity
             android:name=".MainActivity"
             android:label="@string/app_name"
@@ -20,14 +24,20 @@
                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
-        <activity android:name=".InputActivity"
+        <activity
+            android:name=".InputActivity"
             android:label="タスク"
             android:parentActivityName=".MainActivity"
             android:theme="@style/AppTheme.NoActionBar">
             <meta-data
                 android:name="android.support.PARENT_ACTIVITY"
-                android:value="jp.techacademy.madoka.inagaki.mytaskapp.MainActivity"/>
+                android:value="jp.techacademy.madoka.inagaki.mytaskapp.MainActivity" />
         </activity>
+
+        <receiver
+            android:name=".TaskAlarmReceiver"/>
+
+
     </application>
 
 </manifest>
\ No newline at end of file
Index: app/src/main/java/jp/techacademy/madoka/inagaki/mytaskapp/InputActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/jp/techacademy/madoka/inagaki/mytaskapp/InputActivity.kt	(revision 5883c9a24c12fa3d3d589e29dd2d01bbe67236d8)
+++ app/src/main/java/jp/techacademy/madoka/inagaki/mytaskapp/InputActivity.kt	(revision 221465d2f0da65f546894627d21b86f31b8e9ad3)
@@ -1,7 +1,10 @@
 package jp.techacademy.madoka.inagaki.mytaskapp
 
+import android.app.AlarmManager
 import android.app.DatePickerDialog
+import android.app.PendingIntent
 import android.app.TimePickerDialog
+import android.content.Intent
 import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
 import androidx.appcompat.widget.Toolbar
@@ -102,6 +105,7 @@
     private fun addTask() {
         val realm = Realm.getDefaultInstance()
 
+        //追加したりするときに必要なもの
         realm.beginTransaction()
 
         if (mTask == null) {
@@ -111,26 +115,49 @@
             val taskRealmResults = realm.where(Task::class.java).findAll()
 
             val identifier: Int =
+                //max(最大)のidがnull→まだ何もない→idは0になる
+                //nullじゃない→すでにidがある→一番大きなidに+1して最新のidを生成
                 if (taskRealmResults.max("id") != null) {
                     taskRealmResults.max("id")!!.toInt() + 1
                 } else {
                     0
                 }
+            //それをidとして代入
             mTask!!.id = identifier
         }
 
+        //editに入力したテキストをタイトル・コンテンツそれぞれに代入
         val title = title_edit_text.text.toString()
         val content = content_edit_text.text.toString()
 
+        //mTaskに代入
         mTask!!.title = title
         mTask!!.contents = content
+
         val calendar = GregorianCalendar(mYear, mMonth, mDay, mHour, mMinute)
         val date = calendar.time
         mTask!!.date = date
 
+        //できあがったmTaskをコミット
         realm.copyToRealmOrUpdate(mTask!!)
         realm.commitTransaction()
 
         realm.close()
+
+
+        //タスクアラームレシーバーを起動するためのintent
+        val resultIntent = Intent(applicationContext, TaskAlarmReceiver::class.java)
+        //通知するときにタスクのタイトルを表示するのに必要になるのでputExtraを用意する
+        resultIntent.putExtra(EXTRA_TASK, mTask!!.id)
+
+        val resultPendingIntent = PendingIntent.getBroadcast(
+            this,
+            mTask!!.id,
+            resultIntent,
+            PendingIntent.FLAG_UPDATE_CURRENT
+        )
+
+        val alarmManager = getSystemService(ALARM_SERVICE) as AlarmManager
+        alarmManager.set(AlarmManager.RTC_WAKEUP, calendar.timeInMillis, resultPendingIntent)
     }
-}
\ No newline at end of file
+}
Index: app/src/main/java/jp/techacademy/madoka/inagaki/mytaskapp/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/jp/techacademy/madoka/inagaki/mytaskapp/MainActivity.kt	(revision 5883c9a24c12fa3d3d589e29dd2d01bbe67236d8)
+++ app/src/main/java/jp/techacademy/madoka/inagaki/mytaskapp/MainActivity.kt	(revision 221465d2f0da65f546894627d21b86f31b8e9ad3)
@@ -1,5 +1,7 @@
 package jp.techacademy.madoka.inagaki.mytaskapp
 
+import android.app.AlarmManager
+import android.app.PendingIntent
 import android.content.Intent
 import android.os.Bundle
 import androidx.appcompat.app.AlertDialog
@@ -66,6 +68,18 @@
                 results.deleteAllFromRealm()
                 mRealm.commitTransaction()
 
+                //アラームを削除する
+                val resultIntent = Intent(applicationContext, TaskAlarmReceiver::class.java)
+                val resultPendingIntent = PendingIntent.getBroadcast(
+                    this,
+                    task.id,
+                    resultIntent,
+                    PendingIntent.FLAG_UPDATE_CURRENT
+                )
+
+                val alarmManager = getSystemService(ALARM_SERVICE) as AlarmManager
+                alarmManager.cancel(resultPendingIntent)
+
                 reloadListView()
             }
 
Index: app/src/main/java/jp/techacademy/madoka/inagaki/mytaskapp/TaskAlarmReceiver.kt
===================================================================
--- app/src/main/java/jp/techacademy/madoka/inagaki/mytaskapp/TaskAlarmReceiver.kt	(revision 221465d2f0da65f546894627d21b86f31b8e9ad3)
+++ app/src/main/java/jp/techacademy/madoka/inagaki/mytaskapp/TaskAlarmReceiver.kt	(revision 221465d2f0da65f546894627d21b86f31b8e9ad3)
@@ -0,0 +1,57 @@
+package jp.techacademy.madoka.inagaki.mytaskapp
+
+
+import android.app.Notification
+import android.content.BroadcastReceiver
+import android.content.Context
+import android.content.Intent
+import android.app.PendingIntent
+import android.graphics.BitmapFactory
+import android.app.NotificationManager
+import android.app.NotificationChannel
+import android.os.Build
+import androidx.core.app.NotificationCompat
+import io.realm.Realm
+
+class TaskAlarmReceiver : BroadcastReceiver() {
+    override fun onReceive(context: Context?, intent: Intent?) {
+        val notificationManager = context!!.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
+
+        // SDKバージョンが26以上の場合、チャネルを設定する必要がある
+        if (Build.VERSION.SDK_INT >= 26) {
+            val channel = NotificationChannel("default",
+                "Channel name",
+                NotificationManager.IMPORTANCE_DEFAULT)
+            channel.description = "Channel description"
+            notificationManager.createNotificationChannel(channel)
+        }
+
+        // 通知の設定を行う
+        val builder = NotificationCompat.Builder(context, "default")
+        builder.setSmallIcon(R.drawable.small_icon)
+        builder.setLargeIcon(BitmapFactory.decodeResource(context.resources, R.drawable.large_icon))
+        builder.setWhen(System.currentTimeMillis())
+        builder.setDefaults(Notification.DEFAULT_ALL)
+        builder.setAutoCancel(true)
+
+        // EXTRA_TASKからTaskのidを取得して、 idからTaskのインスタンスを取得する
+        val taskId = intent!!.getIntExtra(EXTRA_TASK, -1)
+        val realm = Realm.getDefaultInstance()
+        val task = realm.where(Task::class.java).equalTo("id", taskId).findFirst()
+
+        // タスクの情報を設定する
+        builder.setTicker(task!!.title)   // 5.0以降は表示されない
+        builder.setContentTitle(task.title)
+        builder.setContentText(task.contents)
+
+        // 通知をタップしたらアプリを起動するようにする
+        val startAppIntent = Intent(context, MainActivity::class.java)
+        startAppIntent.addFlags(Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT)
+        val pendingIntent = PendingIntent.getActivity(context, 0, startAppIntent, 0)
+        builder.setContentIntent(pendingIntent)
+
+        // 通知を表示する
+        notificationManager.notify(task!!.id, builder.build())
+        realm.close()
+    }
+}
